name: release

# sadly, triggering on a successful build workflow and then downloading the artifacts from there is not yet
# possible with github actions, see https://github.com/actions/download-artifact/issues/3
# if it was, we could avoid the rebuild and this step could look like this
# on:
#   workflow_run:
#     workflows: ["build"]
#     branches: [refs/tags/v*]
#     types:
#       - completed

# instead, we now simply rebuild the whole thing in a single workflow and a single job
# not pretty but gets the job done

on:
  push: # trigger whenever a new version tag gets pushed https://github.community/t/how-to-run-github-actions-workflow-only-for-new-tags/16075/23
    tags: [ v* ]

jobs:
  release:
    # if condition becomes relevant when cross workflow artifact downloads will be available
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: denoland/setup-deno@main
        with:
          deno-version: "~1.9"
      - uses: actions/cache@v2
        with:
          path: ~/.cache/deno # see https://deno.land/manual/linking_to_external_code
          key: ${{ runner.os }}-deno # it seems there's no particular cache keying required
          restore-keys: |
            ${{ runner.os }}-deno
      - run: |
          deno --version
          deno info

          ./build.sh

          cd test
          ./all.sh ../bin/unipipe
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: UniPipe CLI ${{ github.ref }}
          draft: false
          prerelease: false

      # upload steps
      # ${{ steps.create_release.outputs.upload_url }} from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      - name: Upload unipipe-x86_64-apple-darwin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/unipipe-x86_64-apple-darwin
          asset_name: unipipe-x86_64-apple-darwin
          asset_content_type: application/octet-stream
      - name: Upload unipipe-x86_64-unknown-linux-gnu
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/unipipe-x86_64-unknown-linux-gnu
          asset_name: unipipe-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream
      - name: Upload unipipe-x86_64-pc-windows-msvc.exe
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./bin/unipipe-x86_64-pc-windows-msvc.exe
          asset_name: unipipe-x86_64-pc-windows-msvc.exe
          asset_content_type: application/octet-stream
