export const unipipeOsbAciTerraform = `
#####################################
# UniPipe Service Broker Deployment
# - deploys on Azure ACI including caddy for SSL
#
# Instructions
#   1. Customize the locals block below to configure your deployment and consider configuring a terraform backend
#   2. Ensure you have valid azure credentials to execute terraform \`az login\`
#   3. Run \`terraform init && terraform apply\`
#   4. Add the deployed UniPipe OSB to your marketplace.
#      1. You will find all necessary info in the terraform output.
#      1.1 You should add the unipipe_git_ssh_key to your repository as a Deploy Key and also give the write-access permission on it
#      2. To view the OSB API password run \`terraform output unipipe_basic_auth_password\`
#      3. Ensure your git repo contains a valid catalog.yml. You can also generate an example catalog using \`unipipe generate catalog\`
#
#####################################

terraform {
  required_version = ">= 0.14"

  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 2.0"
    }
    tls = {
      source  = "hashicorp/tls"
      version = "3.1.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "3.1.0"
    }
  }

  # use local state, add a remote backend to your liking
  backend "local" {
  }
}


locals {
  subscription_id     = "<subscript-id>" # the Azure Subscription where you want to deploy unipipe
  resource_group_name = "unipipe-demo"   # name of the resource group to deploy unipipe
  location            = "West Europe"    # the Azure region to use for deployment
  location_tag        = "westeurope"     # location tag, needs to match
  dns_name_label      = "unipipe-demo"   # controls the hostname for the FQDN auto-generated by Azure ACI

  # unipipe configuration
  unipipe_version             = "v1.1.0"                                    # unipipe version, see https://github.com/meshcloud/unipipe-service-broker/releases
  unipipe_basic_auth_username = "user"                                      # OSB API basic auth username
  unipipe_git_remote          = "git@github.com:<GITHUB_ORGANIZATION/GITHUB_REPO>.git" # git repo URL, use a "deploy key" (GitHub) or similar to setup an automation user SSH key for unipipe
  unipipe_git_branch          = "master"                                    # git branch name

  #tf postfix for preventing already-in-use errors
  resource_group_name_postfix = "\${local.resource_group_name}-\${random_string.postfix.result}"
  dns_postfix                          = "\${local.dns_name_label}-\${random_string.postfix.result}"
  unipipe_storage_account_name_postfix = "unipipeosb\${random_string.postfix.result}"
}

provider "azurerm" {
  features {}
  subscription_id = local.subscription_id
}
provider "tls" {
}

provider "random" {
}

# setup key pair for accesing the git repository
# this setup will store the private key in your terrraform state and is thus not recommended for production use cases
resource "tls_private_key" "unipipe_git_ssh_key" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

# first we need a resource group
resource "azurerm_resource_group" "unipipe_osb" {
  name     = local.resource_group_name_postfix
  location = local.location
}

# setup a storage account with a file share, will be later used by caddi to store ACME challenge files
resource "azurerm_storage_account" "unipipe_osb" {
  name                      = local.unipipe_storage_account_name_postfix
  resource_group_name       = azurerm_resource_group.unipipe_osb.name
  location                  = azurerm_resource_group.unipipe_osb.location
  account_tier              = "Standard"
  account_replication_type  = "LRS"
  enable_https_traffic_only = true
}

resource "azurerm_storage_share" "acishare" {
  name                 = "acishare"
  storage_account_name = azurerm_storage_account.unipipe_osb.name
}

# setup a random password for the OSB instance
resource "random_password" "unipipe_basic_auth_password" {
  length  = 16
  special = false
}

resource "random_string" "postfix" {
  length  = 4
  special = false
  lower   = true
  upper   = false
}

# setup container group
resource "azurerm_container_group" "unipipe_osb_with_ssl" {
  resource_group_name = azurerm_resource_group.unipipe_osb.name
  location            = local.location
  name                = "unipipe-osb-with-ssl"
  os_type             = "Linux"
  dns_name_label      = local.dns_postfix
  ip_address_type     = "public"

  container {
    name   = "app"
    image  = "ghcr.io/meshcloud/unipipe-service-broker:\${local.unipipe_version}"
    cpu    = "0.5"
    memory = "1.5"

    ports {
      port     = 8075
      protocol = "TCP"
    }

    secure_environment_variables = {
      "GIT_REMOTE"              = local.unipipe_git_remote
      "GIT_REMOTE_BRANCH"       = local.unipipe_git_branch
      "GIT_SSH_KEY"             = tls_private_key.unipipe_git_ssh_key.private_key_pem
      "APP_BASIC_AUTH_USERNAME" = local.unipipe_basic_auth_username
      "APP_BASIC_AUTH_PASSWORD" = random_password.unipipe_basic_auth_password.result
    }
  }

  container {
    name   = "caddy"
    image  = "caddy"
    cpu    = "0.5"
    memory = "0.5"

    ports {
      port     = 443
      protocol = "TCP"
    }

    ports {
      port     = 80
      protocol = "TCP"
    }

    volume {
      name                 = "aci-caddy-data"
      mount_path           = "/data"
      storage_account_name = azurerm_storage_account.unipipe_osb.name
      storage_account_key  = azurerm_storage_account.unipipe_osb.primary_access_key
      share_name           = azurerm_storage_share.acishare.name
    }

    # instead of a caddyfile, we use CLI options
    commands = ["caddy", "reverse-proxy", "--from", "\${local.dns_postfix}.\${local.location_tag}.azurecontainer.io", "--to", "localhost:8075"]
  }
}

output "url" {
  value       = "https://\${azurerm_container_group.unipipe_osb_with_ssl.fqdn}"
  description = "UniPipe OSB API URL. If you want access to the catalog page, you can add /v2/catalog at the end of the url."
}

output "unipipe_basic_auth_username" {
  value = local.unipipe_basic_auth_username
}

output "unipipe_basic_auth_password" {
  value     = random_password.unipipe_basic_auth_password.result
  sensitive = true
}

output "unipipe_git_ssh_key" {
  value       = tls_private_key.unipipe_git_ssh_key.public_key_openssh
  description = "UniPipe will use this key to access the git repository. You have to give read+write access on the target repository for this key."
}

output "info" {
  value = "UniPipe OSB is starting now. This may take a couple of minutes on Azure ACI. You can use Azure Portal to view logs of the container starting up and debug any issues. Also note that for newly deployed domains Azure ACI can take a few minutes to provide DNS."
}
`